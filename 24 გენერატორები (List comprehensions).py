import random  # 1,3 მდე დამიგენერირე რიცხვები და გაუშვი მატრიცაში
import random
from time import time
'N24. გენერატორები (List comprehensions)'
'გენერატორები უფრო სწრაფია'
s = []
# ცარიელი სია
for i in range(10):  # 10 ელემენტიანი ციკლი
    s.append(i)  # სიის შექმნის მინიჭება
print("s:", s)
'-------------------------------------------------'
'მიმდინარე  i იწერება რომელიც იციკლება 10 ელემენტით და ემატება s1 ს'
s1 = [i for i in range(10)]  # არაა საჭირო ცარიელი სია
print("s1:", s1)
'---------------------------------------------------'
'თითოეული მნიშვნელობა გავამრავლოთ 2 ზე და ჩავსსვათ  სიაში'
# time module ახალი თული დროის დასათვლელად
# კლასიკური ციკლის მეთოდით
START1 = time()  # მიმდინარე დროის დასაფიქსირებლად
s1 = []
for i in range(1000000):
    s1.append(i*2)  # ყველას 2 ზე გამრავლება და ს1 სიაში ჩასმა
END1 = time()  # დასასრულის დასაფიქსირებლად
print("Classic loop", END1-START1)
'--------------------------------------------------'
START2 = time()
s2 = [i*2 for i in range(1000000)]
END2 = time()
print("generator:", END2-START2)
'------------------------------------------------------'
'10 ელემენტი ყველა ლუწი 10 ში'
s1 = []
for i in range(10):
    if i % 2 == 0:  # მიმდინარე ელემენტი / 2 ზე თუ არის უნაშთო
        s1.append(i)  # ყველა ლუწი ჩასვი
print("s1", s1)
'--------------------------------------------------------'
'10 ელემენტი ყველა ლუწი 10 ში, გენერატორი'
s2 = [i for i in range(10) if i % 2 == 0]
# დიაპაზონი i for i in range(10)
# პირობა if i % 2 ==0
print("s2", s2)
'--------------------------------------------'
'10 ელემენტი ყველა ლუწი 10 ში, რომელიც > 5'
s1 = []
for i in range(10):
    if i % 2 == 0 and i > 5:
        # მიმდინარე ელემენტი / 2 ზე თუ არის უნაშთო და მეტია 5 ზე
        s1.append(i)  # ყველა ლუწი ჩასვი
print("s1", s1)
'--------------------------------------------------------'
'10 ელემენტი ყველა ლუწი 10 ში, გენერატორი'
s2 = [i for i in range(10) if i % 2 == 0 and i > 5]
# დიაპაზონი i for i in range(10)
# პირობა if i % 2 ==0 და მეტია ხუთზე
print("s2", s2)
'--------------------------------------------------------------'
'სიტყვები'
s2 = [i for i in 'abcd']  # სიაში ჩასვა ა, ბ, ც, დ
print("s2", s2)
'დავაგენერიროთ 10 შემთხვევითი რიცხვი 100მდე'

# რენდომ რენდინტი აგენერირებს მოცემულ დიაპაზონში მთელ რიცხვებს
s2 = [random.randint(1, 100)for i in range(10)]  # სიაში ჩასვა ა, ბ, ც, დ
# i არიწერება რადგან არმინდა მიმდინარე და მინდა შემთხვევითი რიცხვი
print("s2", s2)
'-----------------------------'
'დაქსაქსვა'
c = input("input digits:").split()  # შეყვანისას შეგვყავს გამოტოვებით
# ბეჭდავს 123> "1", "2", "3"
print(c)
'თუ მძიმის მიხედვით მინდა დავყო'
c = input("input digits:").split(",")  # შეყვანისას შეგვყავს მძიმით დაყოფით
# ბეჭდავს 123> "1", "2", "3"
print(c)
'შეყვანილებია ყველა წინა შემთხვევაში სტრინგ ტიპის'
'სტრინგ ტიპის როგორ იყოს ინტეჯერები'
c = input("input digits:").split()
# თავის თავში იარე თითოეულელემენტზე, I ჩასვი ინტეჯერად
c = [int(i)for i in c]
print(c)
'--------------------------------------------------'
'ორი ციკლის მოთავსება'
# მინიჭებისას (i,j) თუ ერთზე მეტი ელემენტია უნდა იყოს ფრჩხილებში კორტეჟში
c = [(i, j)for i in 'abc' for j in [1, 2, 3, ]]
# შემოდის i  დგება a იზე, მეორეში a,1,
# და მეორესთან შეთავსების ყველა შესაბამის ვარიანტს წერს
print(c)
'-------------------------------'
'კორტეჟების სია '
d = [("Audi", 2000),  # პირველი "აუდი" ნულოვანი ელემენტია მეორე 1
     ("Bmw", 2005),
     ("Opel", 2010), ]
'მოვათავსო ახალ სიაში მანქანების სახელები'
# ნულოვანი ელემენტი ჩააგდე c ში
c = [i[0]for i in d]  # თუ i[0] ში 1 იანი ჩაჯდა წლებს გამოიტანს
print(c)
'ყველა მანქანის სახელი მეტია 2004 წელზე'
d = [("Audi", 2000),  # პირველი "აუდი" ნულოვანი ელემენტია მეორე 1
     ("Bmw", 2005),
     ("Opel", 2010), ]
'მოვათავსო ახალ სიაში მანქანების სახელები'
# ნულოვანი ელემენტი ჩააგდე c ში
c = [i for i in d if i[1] > 2004]  # თუ წელი მეტია 2004 ზე
print(c)  # გამოიტანს ასეთ სახელს და წელს
'ამოკრიბე რიცხვები და სიაში შეიტანე'
text = 'asjadk1234'
# თუ მიმდინარე ელემენტი არის რიცხვი შეიტანე c სიაში ინტეჯერად
c = [int(i) for i in text if i.isdigit()]
print(c)
'-------------------------------------------------------'
'მატრიცა 6x6'
a = [[random.randint(1, 3) for j in range(4)] for i in range(4)]
# -----ეს გენერატორი არის სვეტები--     ---ეს არის სტრიქონები-
for i in a:
    print(a)
'-------------------------------------------------------'
'შეიძლება ლექსიკონებზე  და სიმრავლეებზე'
'არ შეიძლება გენერატორი კორტეჟებზე, უცვლადია არიციკლება'
'ლექსიკონებზე'
# --------------------------------------
'გენერატორი სხვადასხვა ინფოს მისაღებად'
# -----------------------------------------
teams = {"Man UTD":
         {"Country": "ENG", "color": "red", "founded": 1878},
         "AJAx":
         {"country": "Ned", "color": "white", "founded": 1900},
         "Dinamo Tbilisi": {"country": "geo", "color": "blue", "founded": 1925}}

# მივმართოთ მხოლოდ გასაღებებს
b = [teams[i] for i in teams]
print(b)
# დუეტი
b = [(i, teams[i]) for i in teams]
print(b)
# სახელი და როდის დაარსდა
# (i, სახელები--- teams[i]("founded") ფაუნდედ გასაღების მნიშვნელობა
# გავაკეთე ორგანზომილებიანი გამოძახება
# შევედი"Country": "ENG", "color":"red", "founded":"1878"},
# მივმართე "founded" გასაღებს
print("name and value")
b = [(i, teams[i]["founded"]) for i in teams]
print(b)
'----------------------------------------------------------'
'თითოეული რიცხვის 1 დან 10 მდეე კვადრატები  '
'ლექსიკონი-გენერატორი'
a = {}
for i in range(10):
    a[i] = i**2
print(a)
#'თითოეული რიცხვის 1 დან 10 მდეე კვადრატები  '
b = {i: i**2 for i in range(10)}
print(b)
'----------------------------------------------------------'
'გენერატორი გამოიტანს 1ზე მეტ ელემენტს'
a = {"one": 1, "two": 2, "three": 3}
# a.items()} მოაქვს "one":1,
# კომბინაცია k:v
b = {k: v for k, v in a.items() if v > 1}
print(b)
'----------------------------------------------------------'
print("dublikatebs amoagdebs", "abcdasdsafdd")
'სიმრავლის გენერატორი'
a = 'abcdasdsafdd'  # სიმრავლეებში არ შეიძლება დუბლიკატები
# დაიარე ა ცვლადშითითოეულ ელემენტზე
b = {i for i in a}  # სიმრავლეებში არ არის საჭირო : ლექსიკონისგან განსხვავებით
print(b)
'----------------------------------------------------------'
